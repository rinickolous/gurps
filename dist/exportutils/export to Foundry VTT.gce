'VBScript
'The line above must be the very first line of the file.
'
'NOTE:
'This GCE file will only work with characters saved by GCA 4!
'
'By Brian Ronnle, enhanced for Foundry VTT by Chris Normand/Nose66
'Based on the original export filter by Graham Brand (Spyke)
'
Const LastUpdated = 20211205
' Last Updated: December 5, 2021
' v1
'
Const gcaStat = 1
Const Stats = 1
Const Ads = 2
Const Disads = 3
Const Quirks = 4
Const Perks = 5
Const Skills = 6
Const Spells = 7
Const Equipment = 8
Const Packages = 9


'****************************************
'Creating options
'****************************************
Sub CharacterSheetOptions()
    
    ' no options added yet
    
End Sub

'****************************************
'The Main Module, where the form starts
'****************************************
Sub Main()
    
    DebugLog("export xml for Foundry VTT (" & LastUpdated & ")")
    
    ' begin the xml file
    Paragraph = "<?xml version=""1.0"" encoding=""iso-8859-1""?>"
    Paragraph = "<root release=""Foundry"" version=""GCA-11"">"
    Paragraph = "<character>"
    
    ' in Fantasy Grounds the <name> field must be at the top level
    Paragraph = "<name type=""string"">" & Char.Name & "</name>"
    
    ' add the various sections
    Call PrintAbilities()
    Call PrintAttributes()
    Call PrintCombat()
    Call PrintEncumbrance()
    Call PrintTraits()
    Call PrintEquipment()
    Call PrintDescription()
    Call PrintNotes()
    Call PrintPointSummary()
    
    Paragraph = "</character>"
    Paragraph = "</root>"
    
End Sub


'****************************************
'Print the abilities block
'****************************************
Sub PrintAbilities()
    
    Paragraph = ""
    Paragraph = "<abilities>"
    
    Call PrintSkills()
    Call PrintSpells()
    
    Paragraph = "</abilities>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the attributes
'****************************************
Sub PrintAttributes()
    
    Dim ListLoc
    
    Paragraph = ""
    Paragraph = "<attributes>"
    
    ListLoc = Char.ItemPositionByNameAndExt("ST", Stats)
    If ListLoc > 0 Then
        Paragraph = "<strength type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</strength>"
        Paragraph = "<strength_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</strength_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("DX", Stats)
    If ListLoc > 0 Then
        Paragraph = "<dexterity type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</dexterity>"
        Paragraph = "<dexterity_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</dexterity_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("IQ", Stats)
    If ListLoc > 0 Then
        Paragraph = "<intelligence type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</intelligence>"
        Paragraph = "<intelligence_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</intelligence_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("HT", Stats)
    If ListLoc > 0 Then
        Paragraph = "<health type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</health>"
        Paragraph = "<health_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</health_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Hit Points", Stats)
    If ListLoc > 0 Then
        Paragraph = "<hitpoints type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</hitpoints>"
        Paragraph = "<hitpoints_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</hitpoints_points>"
        Paragraph = "<hps type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</hps>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Will", Stats)
    If ListLoc > 0 Then
        Paragraph = "<will type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</will>"
        Paragraph = "<will_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</will_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Perception", Stats)
    If ListLoc > 0 Then
        Paragraph = "<perception type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</perception>"
        Paragraph = "<perception_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</perception_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Fatigue Points", Stats)
    If ListLoc > 0 Then
        Paragraph = "<fatiguepoints type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</fatiguepoints>"
        Paragraph = "<fatiguepoints_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</fatiguepoints_points>"
        Paragraph = "<fps type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</fps>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Basic Lift", Stats)
    If ListLoc > 0 Then
        Paragraph = "<basiclift type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</basiclift>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("One-Handed Lift", Stats)
    If ListLoc > 0 Then
        Paragraph = "<onehandedlift type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</onehandedlift>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Two-Handed Lift", Stats)
    If ListLoc > 0 Then
        Paragraph = "<twohandedlift type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</twohandedlift>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Shove/Knock Over", Stats)
    If ListLoc > 0 Then
        Paragraph = "<shove type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</shove>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Carry on Back", Stats)
    If ListLoc > 0 Then
        Paragraph = "<carryonback type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</carryonback>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Shift Slightly", Stats)
    If ListLoc > 0 Then
        Paragraph = "<shiftslightly type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</shiftslightly>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Fright Check", Stats)
    If ListLoc > 0 Then
        Paragraph = "<frightcheck type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</frightcheck>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Taste/Smell", Stats)
    If ListLoc > 0 Then
        Paragraph = "<tastesmell type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</tastesmell>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Touch", Stats)
    If ListLoc > 0 Then
        Paragraph = "<touch type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</touch>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Vision", Stats)
    If ListLoc > 0 Then
        Paragraph = "<vision type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</vision>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Hearing", Stats)
    If ListLoc > 0 Then
        Paragraph = "<hearing type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</hearing>"
    End If
    
    
    Paragraph = "<thrust type=""string"">" & Char.BaseTH & "</thrust>"
    Paragraph = "<swing type=""string"">" & Char.BaseSW & "</swing>"
    
    ListLoc = Char.ItemPositionByNameAndExt("Speed", Stats)
    If ListLoc = 0 Then
        ListLoc = Char.ItemPositionByNameAndExt("Basic Speed", Stats)
    End If
    
    If ListLoc > 0 Then
        Paragraph = "<basicspeed type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</basicspeed>"
        Paragraph = "<basicspeed_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</basicspeed_points>"
    End If
    
    ListLoc = Char.ItemPositionByNameAndExt("Move", Stats)
    If ListLoc = 0 Then
        ListLoc = Char.ItemPositionByNameAndExt("Basic Move", Stats)
    End If
    
    If ListLoc > 0 Then
        Paragraph = "<basicmove type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</basicmove>"
        Paragraph = "<basicmove_points type=""number"">" & Char.Items(ListLoc).TagItem("points") & "</basicmove_points>"
    End If
    
    EncRow = Char.EncumbranceLevel
    If EncRow = 0 Then
        ListLoc = Char.ItemPositionByNameAndExt("No Encumbrance Move", Stats)
        If ListLoc > 0 Then
            Paragraph = "<move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</move>"
        End If
    ElseIf EncRow = 1 Then
        ListLoc = Char.ItemPositionByNameAndExt("Light Encumbrance Move", Stats)
        If ListLoc > 0 Then
            Paragraph = "<move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</move>"
        End If
    ElseIf EncRow = 2 Then
        ListLoc = Char.ItemPositionByNameAndExt("Medium Encumbrance Move", Stats)
        If ListLoc > 0 Then
            Paragraph = "<move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</move>"
        End If
    ElseIf EncRow = 3 Then
        ListLoc = Char.ItemPositionByNameAndExt("Heavy Encumbrance Move", Stats)
        If ListLoc > 0 Then
            Paragraph = "<move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</move>"
        End If
    ElseIf EncRow = 4 Then
        ListLoc = Char.ItemPositionByNameAndExt("X-Heavy Encumbrance Move", Stats)
        If ListLoc > 0 Then
            Paragraph = "<move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</move>"
        End If
    End If
    
    Paragraph = "</attributes>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the combat block
'****************************************
Sub PrintCombat()
    
    Paragraph = ""
    Paragraph = "<combat>"
    
    ListLoc = char.ItemPositionByNameAndExt(curStat, Stats)
    if ListLoc > 0 then
        Paragraph = "<dodge type=""number"">" & Char.Items(ListLoc).TagItem("score") & "</dodge>"
    end if
    
    
    ' dodge list
    ListLoc = Char.ItemPositionByNameAndExt("Dodge", Stats)
    If ListLoc > 0 Then
        Score = Char.Items(ListLoc).TagItem("score")
        Paragraph = "<enc0_dodge type=""number"">" & Score & "</enc0_dodge>"
        Paragraph = "<enc1_dodge type=""number"">" & (Score - 1) & "</enc1_dodge>"
        Paragraph = "<enc2_dodge type=""number"">" & (Score - 2) & "</enc2_dodge>"
        Paragraph = "<enc3_dodge type=""number"">" & (Score - 3) & "</enc3_dodge>"
        Paragraph = "<enc4_dodge type=""number"">" & (Score - 4) & "</enc4_dodge>"
    End If
    
    
    EncRow = Char.EncumbranceLevel
    ListLoc = Char.ItemPositionByNameAndExt("Dodge", Stats)
    If ListLoc > 0 Then
        Dodge = Char.Items(ListLoc).TagItem("score")
        If EncRow = 0 Then
            Paragraph = "<dodge type=""number"">" & (Dodge) & "</dodge>"
        ElseIf EncRow = 1 Then
            Paragraph = "<dodge type=""number"">" & (Dodge - 1) & "</dodge>"
        ElseIf EncRow = 2 Then
            Paragraph = "<dodge type=""number"">" & (Dodge - 2) & "</dodge>"
        ElseIf EncRow = 3 Then
            Paragraph = "<dodge type=""number"">" & (Dodge - 3) & "</dodge>"
        ElseIf EncRow = 4 Then
            Paragraph = "<dodge type=""number"">" & (Dodge - 4) & "</dodge>"
        End If
    End If
    
    
    Paragraph = "<parry type=""number"">" & Char.parryscore & "</parry>"
    Paragraph = "<block type=""number"">" & Char.blockscore & "</block>"
    Paragraph = "<dr type=""string"">" & Char.Body("Torso").DR & "</dr>"
    
    Call PrintHandWeapons()
    Call PrintRangedWeapons()
    Call PrintProtection()
    
    Paragraph = "</combat>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the traits block
'****************************************
Sub PrintTraits()
    
    Dim ListLoc
    
    ' we'll add the occasional spacer to make the xml file easier to read in a text editor
    Paragraph = ""
    Paragraph = "<traits>"
    
    Paragraph = "<race type=""string"">" & Char.Race & "</race>"
    Paragraph = "<height type=""string"">" & Char.Height & "</height>"
    Paragraph = "<weight type=""string"">" & Char.Weight & "</weight>"
    Paragraph = "<age type=""string"">" & Char.Age & "</age>"
    Paragraph = "<appearance type=""string"">" & Char.Appearance & "</appearance>"
    
    ListLoc = Char.ItemPositionByNameAndExt("Size Modifier", Stats)
    If ListLoc > 0 Then
        Paragraph = "<sizemodifier type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</sizemodifier>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Extra Arm Reach", Stats)
    If ListLoc > 0 Then
        Paragraph = "<reach type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</reach>"
    End If
    
    Call PrintAds()
    Call PrintDisads()
    Call PrintSocialBackground()
    
    Call PrintReactions()
    Call PrintConditional()
    
    ListLoc = Char.ItemPositionByNameAndExt("Tech Level", Stats)
    If ListLoc > 0 Then
        Paragraph = "<tl type = ""string"">" & Char.Items(ListLoc).TagItem("score") & "</tl>"
        Paragraph = "<tl_points type = ""number"">" & Char.Items(ListLoc).TagItem("points") & "</tl_points>"
    End If
    
    
    Paragraph = "</traits>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the Encumbrance Block
'****************************************
Sub PrintEncumbrance()
    
    Paragraph = ""
    Paragraph = "<encumbrance>"

    ' set the current encumbrance check box
    EncRow = Char.EncumbranceLevel
    If EncRow = 0 Then
        Paragraph = "<enc_0 type=""number"">1</enc_0>"
    Else
        Paragraph = "<enc_0 type=""number"">0</enc_0>"
    End If
    If EncRow = 1 Then
        Paragraph = "<enc_1 type=""number"">1</enc_1>"
    Else
        Paragraph = "<enc_1 type=""number"">0</enc_1>"
    End If
    If EncRow = 2 Then
        Paragraph = "<enc_2 type=""number"">1</enc_2>"
    Else
        Paragraph = "<enc_2 type=""number"">0</enc_2>"
    End If
    If EncRow = 3 Then
        Paragraph = "<enc_3 type=""number"">1</enc_3>"
    Else
        Paragraph = "<enc_3 type=""number"">0</enc_3>"
    End If
    If EncRow = 4 Then
        Paragraph = "<enc_4 type=""number"">1</enc_4>"
    Else
        Paragraph = "<enc_4 type=""number"">0</enc_4>"
    End If
    
    
    ' weight list
    ListLoc = Char.ItemPositionByNameAndExt("No Encumbrance", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc0_weight type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc0_weight>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Light Encumbrance", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc1_weight type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc1_weight>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Medium Encumbrance", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc2_weight type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc2_weight>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Heavy Encumbrance", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc3_weight type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc3_weight>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("X-Heavy Encumbrance", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc4_weight type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc4_weight>"
    End If
    
    ' move list
    ListLoc = Char.ItemPositionByNameAndExt("No Encumbrance Move", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc0_move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc0_move>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Light Encumbrance Move", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc1_move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc1_move>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Medium Encumbrance Move", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc2_move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc2_move>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("Heavy Encumbrance Move", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc3_move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc3_move>"
    End If
    ListLoc = Char.ItemPositionByNameAndExt("X-Heavy Encumbrance Move", Stats)
    If ListLoc > 0 Then
        Paragraph = "<enc4_move type=""string"">" & Char.Items(ListLoc).TagItem("score") & "</enc4_move>"
    End If
    
    ' dodge list
    ListLoc = Char.ItemPositionByNameAndExt("Dodge", Stats)
    If ListLoc > 0 Then
        Score = Char.Items(ListLoc).TagItem("score")
        Paragraph = "<enc0_dodge type=""number"">" & Score & "</enc0_dodge>"
        Paragraph = "<enc1_dodge type=""number"">" & (Score - 1) & "</enc1_dodge>"
        Paragraph = "<enc2_dodge type=""number"">" & (Score - 2) & "</enc2_dodge>"
        Paragraph = "<enc3_dodge type=""number"">" & (Score - 3) & "</enc3_dodge>"
        Paragraph = "<enc4_dodge type=""number"">" & (Score - 4) & "</enc4_dodge>"
    End If
    
    Paragraph = "</encumbrance>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Reaction Modifiers
'****************************************
Sub PrintReactions()
    
    ' at the moment I'll leave the bonus descriptions out
    ' it would swamp the text box in Fantasy Grounds
    
    Paragraph = "<reactionmodifiers>"
    
    ' ***appearance mods***
    ' print appearance reaction
    out = ""
    tmp = "Unappealing"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("bonuslist")
    End If
    
    tmp = "Appealing"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("bonuslist")
    End If
    
    tmp = "Status"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("bonuslist")
    End If
    
    tmp = "Reaction"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("bonuslist")
    End If
    
    ' Cleanup lists by adding "|" instead of "," between items. ~Stevil
    out = Replace(out, ", +", "|+")
    out = Replace(out, ", -", "|-")
    out = Replace(out, ", 0 ", "|0 ")
    
    ' and print the whole thing
    Paragraph = out
    Paragraph = "</reactionmodifiers>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the Conditional Modifiers
'****************************************
Sub PrintConditional()
    
    ' at the moment I'll leave the bonus descriptions out
    ' it would swamp the text box in Fantasy Grounds
    
    Paragraph = "<conditionalmods>"
    
    ' ***appearance mods***
    ' print appearance reaction
    out = ""
    tmp = "Unappealing"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("conditionallist")
    End If
    
    tmp = "Appealing"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("conditionallist")
    End If
    
    tmp = "Status"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("conditionallist")
    End If
    
    tmp = "Reaction"
    l1 = Char.ItemPositionByNameAndExt(tmp, Stats)
    If l1 > 0 Then
        out = out & "|" & Char.Items(l1).TagItem("conditionallist")
    End If
    
    ' Cleanup lists by adding "|" instead of "," between items. ~Stevil
    out = Replace(out, ", +", "|+")
    out = Replace(out, ", -", "|-")
    out = Replace(out, ", 0 ", "|0 ")
    
    ' and print the whole thing
    Paragraph = out
    Paragraph = "</conditionalmods>"
    Paragraph = ""
    
End Sub


'****************************************
'Print the Additional Stats
'****************************************
Sub PrintAdditionalStats()
    
    ' not yet implemented (nowhere to put them on the Fantasy Grounds character sheet)
    
End Sub


'****************************************
'Print Languages and Cultures
'****************************************
Sub PrintSocialBackground()
    
    Dim item_index
    Dim tag_index
    
    'Cultures
    Paragraph = ""
    Paragraph = "<culturalfamiliaritylist>"
    
    For i = 1 To Char.Items.Count
        If Char.Items(i).ItemType = Ads Or Char.Items(i).ItemType = Disads Then
            If Char.Items(i).TagItem("hide") = "" Then 'not hidden
                curcat = Char.items(i).tagitem("cat")
                If incatlist("cultural familiarity", curcat) Then
                    
                    item_index = item_index + 1
                    tag_index = LeadingZeroes(CStr(item_index), 5)
                    
                    Paragraph = "<id-" & tag_index & ">"
                    
                    Paragraph = "<name type = ""string"">" & Char.Items(i).FullNameTL & "</name>"
                    Paragraph = "<points type = ""number"">" & Char.Items(i).TagItem("points") & "</points>"
                    
                    Paragraph = "</id-" & tag_index & ">"
                    
                End If
            End If
        End If
    Next
    Paragraph = "</culturalfamiliaritylist>"
    Paragraph = ""
    
    'Languages
    Paragraph = ""
    Paragraph = "<languagelist>"
    
    item_index = 0
    For i = 1 To Char.Items.Count
        If Char.Items(i).ItemType = Ads Or Char.Items(i).ItemType = Disads Then
            If Char.Items(i).TagItem("hide") = "" Then 'not hidden
                curcat = Char.items(i).tagitem("cat")
                If incatlist("language", curcat) Then
                    
                    item_index = item_index + 1
                    tag_index = LeadingZeroes(CStr(item_index), 5)
                    
                    Paragraph = "<id-" & tag_index & ">"
                    
                    CurrName = LCase(Trim(Char.Items(i).Name))
                    NextName = LCase(Trim(Char.Items(i + 1).Name))
                    
                    ' print the name (adding a note if it is the native language)
                    
                    If IsNativeLang(i) Then
                        Paragraph = "<name type = ""string"">" & Trim(Char.Items(i).Name) & " (Native)</name>"
                    Else
                        Paragraph = "<name type = ""string"">" & Trim(Char.Items(i).Name) & "</name>"
                    End If
                    
                    ' print the first extension (could be spoken or written, or a full language with both)
                    Select Case LCase(Trim(Char.Items(i).nameext))
                    Case "spoken"
                        Paragraph = "<spoken type = ""string"">" & Char.Items(i).LevelName & "</spoken>"
                    Case "written"
                        Paragraph = "<written type = ""string"">" & Char.Items(i).LevelName & "</written>"
                    Case Else
                        ' this is a full language, print the level to both spoken and written
                        Paragraph = "<spoken type = ""string"">" & Char.Items(i).LevelName & "</spoken>"
                        Paragraph = "<written type = ""string"">" & Char.Items(i).LevelName & "</written>"
                    End Select
                    
                    ' and note the points cost
                    tmpPoints = CInt(Char.Items(i).TagItem("points"))
                    
                    ' print the second extension if there are both spoken and written versions
                    If CurrName = NextName Then
                        If LCase(Trim(Char.Items(i + 1).nameext)) = "spoken" Then
                            Paragraph = "<spoken type = ""string"">" & Char.Items(i + 1).LevelName & "</spoken>"
                        Else
                            Paragraph = "<written type = ""string"">" & Char.Items(i + 1).LevelName & "</written>"
                        End If
                        
                        ' add on the additional points
                        tmpPoints = tmpPoints + CInt(Char.Items(i + 1).TagItem("points"))
                        
                        ' and increment i so that we skip the second character item next time round
                        i = i + 1
                    End If
                    
                    ' print the total points
                    Paragraph = "<points type = ""number"">" & tmpPoints & "</points>"
                    
                    Paragraph = "</id-" & tag_index & ">"
                    
                End If
            End If
        End If
    Next
    
    Paragraph = "</languagelist>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Ads and Perks
'****************************************
Sub PrintAds()
    
    If Char.Count(Ads) <= 0 And Char.Count(Packages) <= 0 And Char.Count(Perks) <= 0 Then Exit Sub
    
    Dim ads_index
    Dim tag_index
    Dim mods_text
    
    Paragraph = ""
    Paragraph = "<adslist>"
    
    ' print the templates, metatraits, etc
    If Char.Count(Packages) > 0 Then
        For i = 1 To Char.Items.Count
            If Char.Items(i).ItemType = Packages And Char.Items(i).TagItem("hide") = "" Then
                ' it's a package and not hidden
                ads_index = ads_index + 1
                
                tmp = Char.Items(i).FullName
                
                work = Char.Items(i).LevelName
                If work <> "" Then
                    tmp = tmp & " (" & work & ")"
                End If
                
                mods_text = Char.Items(i).ExpandedModCaptions(False)
                if mods_text <> "" Then
                    mods_text = mods_text & "<br>"
                End If
                
                tag_index = LeadingZeroes(CStr(ads_index), 5)
                
                Paragraph = "<id-" & tag_index & ">"
                Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
                ' get the points cost
                work = CInt(Char.Items(i).TagItem("points"))
                ' if the item is a parent, subtract the points value of its children
                If Char.Items(i).TagItem("childpoints") <> "" Then
                    work = work - CInt(Char.Items(i).TagItem("childpoints"))
                End If
                Paragraph = "<points type=""number"">" & CStr(work) & "</points>"
                Paragraph = "<text type=""string"">" & mods_text & Char.Items(i).TagItem("usernotes") & "</text>"
                Paragraph = "</id-" & tag_index & ">"
                
            End If
        Next
    End If
    
    ' print the advantages
    If Char.Count(Ads) > 0 Then
        
        For i = 1 To Char.Items.Count
            If Char.Items(i).ItemType = Ads And Char.Items(i).TagItem("hide") = "" Then
                ' it's an advantage and not hidden
                Okay = True
                If Okay Then
                    
                    ads_index = ads_index + 1
                    
                    tmp = Char.Items(i).FullName
                    
                    work = Char.Items(i).LevelName
                    If work <> "" Then
                        tmp = tmp & " (" & work & ")"
                    End If
                    
                    mods_text = Char.Items(i).ExpandedModCaptions(False)
                    if mods_text <> "" Then
                        mods_text = mods_text & "<br>"
                    End If
                    
                    tag_index = LeadingZeroes(CStr(ads_index), 5)
                    
                    Paragraph = "<id-" & tag_index & ">"
                    Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
                    ' get the points cost
                    work = CInt(Char.Items(i).TagItem("points"))
                    ' if the item is a parent, subtract the points value of its children
                    If Char.Items(i).TagItem("childpoints") <> "" Then
                        work = work - CInt(Char.Items(i).TagItem("childpoints"))
                    End If
                    Paragraph = "<points type=""number"">" & CStr(work) & "</points>"
                    Paragraph = "<text type=""string"">" & mods_text & Char.Items(i).TagItem("usernotes") & "</text>"
                    Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
                    Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
                    Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
                    Paragraph = "</id-" & tag_index & ">"
                    
                End If
            End If
        Next
        
    End If
    
    ' print the perks
    If Char.Count(Perks) > 0 Then
        
        For i = 1 To Char.Items.Count
            If Char.Items(i).ItemType = Perks And Char.Items(i).TagItem("hide") = "" Then
                ' it's a perk and not hidden
                ads_index = ads_index + 1
                
                tmp = Char.Items(i).FullName
                
                work = Char.Items(i).LevelName
                If work <> "" Then
                    tmp = tmp & " (" & work & ")"
                End If
                
                mods_text = Char.Items(i).ExpandedModCaptions(False)
                if mods_text <> "" Then
                    mods_text = mods_text & "<br>"
                End If
                
                tag_index = LeadingZeroes(CStr(ads_index), 5)
                
                Paragraph = "<id-" & tag_index & ">"
                Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
                ' get the points cost
                work = CInt(Char.Items(i).TagItem("points"))
                ' if the item is a parent, subtract the points value of its children
                If Char.Items(i).TagItem("childpoints") <> "" Then
                    work = work - CInt(Char.Items(i).TagItem("childpoints"))
                End If
                Paragraph = "<points type=""number"">" & CStr(work) & "</points>"
                Paragraph = "<text type=""string"">" & mods_text & Char.Items(i).TagItem("usernotes") & "</text>"
                Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
                Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
                Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
                Paragraph = "</id-" & tag_index & ">"
                
            End If
        Next
        
    End If
    
    Paragraph = "</adslist>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Disadvantages and Quirks
'****************************************
Sub PrintDisads()
    
    Dim ads_index
    Dim tag_index
    Dim mods_text
    
    Paragraph = ""
    Paragraph = "<disadslist>"
    
' print the disadvantages
    If Char.Count(Disads) > 0 Then
        
        For i = 1 To Char.Items.Count
            If Char.Items(i).ItemType = Disads And Char.Items(i).TagItem("hide") = "" Then
                ' it's a disadvantage and not hidden
                
                ads_index = ads_index + 1
                
                tmp = Char.Items(i).FullName
                
                work = Char.Items(i).LevelName
                If work <> "" Then
                    tmp = tmp & " (" & work & ")"
                End If
                
                mods_text = Char.Items(i).ExpandedModCaptions(False)
                if mods_text <> "" Then
                    mods_text = mods_text & "<br>"
                End If
                
                tag_index = LeadingZeroes(CStr(ads_index), 5)
                
                Paragraph = "<id-" & tag_index & ">"
                Paragraph = "<name type=""string"">" & CreateControlRoll(UpdateEscapeChars(tmp)) & "</name>"
                ' get the points cost
                work = CInt(Char.Items(i).TagItem("points"))
                ' if the item is a parent, subtract the points value of its children
                If Char.Items(i).TagItem("childpoints") <> "" Then
                    work = work - CInt(Char.Items(i).TagItem("childpoints"))
                End If
                Paragraph = "<points type=""number"">" & CStr(work) & "</points>"
                Paragraph = "<text type=""string"">" & CreateControlRoll(mods_text & Char.Items(i).TagItem("usernotes")) & "</text>"
                Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
                Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
                Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
                Paragraph = "</id-" & tag_index & ">"
                
            End If
        Next
        
    End If
    
    ' print the quirks
    If Char.Count(Quirks) > 0 Then
        
        For i = 1 To Char.Items.Count
            If Char.Items(i).ItemType = Quirks And Char.Items(i).TagItem("hide") = "" Then
                ' it's a quirk and not hidden
                ads_index = ads_index + 1
                
                tmp = Char.Items(i).FullName
                
                work = Char.Items(i).LevelName
                If work <> "" Then
                    tmp = tmp & " (" & work & ")"
                End If
                
                mods_text = Char.Items(i).ExpandedModCaptions(False)
                if mods_text <> "" Then
                    mods_text = mods_text & "<br>"
                End If
                
                tag_index = LeadingZeroes(CStr(ads_index), 5)
                
                Paragraph = "<id-" & tag_index & ">"
                Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
                ' get the points cost
                work = CInt(Char.Items(i).TagItem("points"))
                ' if the item is a parent, subtract the points value of its children
                If Char.Items(i).TagItem("childpoints") <> "" Then
                    work = work - CInt(Char.Items(i).TagItem("childpoints"))
                End If
                Paragraph = "<points type=""number"">" & CStr(work) & "</points>"
                Paragraph = "<text type=""string"">" & mods_text & Char.Items(i).TagItem("usernotes") & "</text>"
                Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
                Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
                Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
                Paragraph = "</id-" & tag_index & ">"
                
            End If
        Next
        
    End If
    
    Paragraph = "</disadslist>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Skills
'****************************************
Sub PrintSkills()
    
    If Char.Count(Skills) <= 0 Then Exit Sub
    
    Dim skills_index
    Dim tag_index
    
    Paragraph = ""
    Paragraph = "<skilllist>"
    
    For i = 1 To Char.Items.Count
        
        If Char.Items(i).ItemType = Skills And Char.Items(i).TagItem("hide") = "" Then
            
            ' it's a skill and not hidden
            skills_index = skills_index + 1
            tag_index = LeadingZeroes(CStr(skills_index), 5)
            
            Paragraph = "<id-" & tag_index & ">"
            
            tmp = Char.Items(i).FullNameTL
            
            If Char.Items(i).Mods.Count > 0 Then
                work = " ("
                For j = 1 To Char.Items(i).Mods.Count
                    If j > 1 Then
                        work = work & "; "
                    End If
                    work = work & Char.Items(i).Mods(j).FullName
                    work = work & ", " & Char.Items(i).Mods(j).TagItem("value")
                Next
                work = work & ")"
                tmp = tmp & work
            End If
            
            Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
            Paragraph = "<type type=""string"">" & Char.Items(i).TagItem("type") & "</type>"
            Paragraph = "<level type=""number"">" & Char.Items(i).Level & "</level>"
            
            work = Char.Items(i).TagItem("stepoff")
            If work <> "" Then
                tmp = work
                work = Char.Items(i).TagItem("step")
                If work <> "" Then
                    tmp = tmp & work
                Else
                    tmp = tmp & "?"
                End If
            Else
                tmp = tmp & "?+?"
            End If
            Paragraph = "<relativelevel type=""string"">" & tmp & "</relativelevel>"
            
            Paragraph = "<points type=""number"">" & Char.Items(i).TagItem("points") & "</points>"
            Paragraph = "<text type=""string"">" & Char.Items(i).TagItem("usernotes") & "</text>"
            Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
            Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
            Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
            
            Paragraph = "</id-" & tag_index & ">"
            
        End If
    Next
    
    Paragraph = "</skilllist>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Spells
'****************************************
Sub PrintSpells()
    
    If Char.Count(Spells) <= 0 Then Exit Sub
    
    Dim skills_index
    Dim tag_index
    
    Paragraph = ""
    Paragraph = "<spelllist>"
    
    For i = 1 To Char.Items.Count
        If Char.Items(i).ItemType = Spells And Char.Items(i).TagItem("hide") = "" Then
            
            ' it's a spell and not hidden
            skills_index = skills_index + 1
            tag_index = LeadingZeroes(CStr(skills_index), 5)
            
            Paragraph = "<id-" & tag_index & ">"
            
            tmp = Char.Items(i).FullNameTL
            
            If Char.Items(i).Mods.Count > 0 Then
                work = " ("
                For j = 1 To Char.Items(i).Mods.Count
                    If j > 1 Then
                        work = work & "; "
                    End If
                    work = work & Char.Items(i).Mods(j).FullName
                    work = work & ", " & Char.Items(i).Mods(j).TagItem("value")
                Next
                work = work & ")"
                tmp = tmp & work
            End If
            
            spellClass = ""
            spellResist = ""
            if Char.Items(i).TagItem("class") <> "" Then
                classSplit = Split(Char.Items(i).TagItem("class"), "/", 2)
                If UBound(classSplit) > 0 Then
                    spellClass = classSplit(0)
                    spellResist = classSplit(1)
                Else
                    spellClass = classSplit(0)
                End If
            End If
            spellCat = Char.Items(i).TagItem("cat")
            if spellCat = "%NewSpellList%" Then    
                spellCat = ""
            End If
            
            Paragraph = "<name type=""string"">" & UpdateEscapeChars(tmp) & "</name>"
            Paragraph = "<level type=""number"">" & Char.Items(i).Level & "</level>"
            Paragraph = "<class type=""string"">" & spellClass & "</class>"
            Paragraph = "<type type=""string"">" & Char.Items(i).TagItem("type") & "</type>"
            Paragraph = "<points type=""number"">" & Char.Items(i).TagItem("points") & "</points>"
            Paragraph = "<text type=""string"">" & Char.Items(i).TagItem("usernotes") & "</text>"
            
            Paragraph = "<time type=""string"">" & Char.Items(i).TagItem("time") & "</time>"
            Paragraph = "<duration type=""string"">" & Char.Items(i).TagItem("duration") & "</duration>"
            Paragraph = "<costmaintain type=""string"">" & Char.Items(i).TagItem("castingcost") & "</costmaintain>"
            Paragraph = "<resist type=""string"">" & spellResist & "</resist>"
            Paragraph = "<college type=""string"">" & spellCat & "</college>"
            Paragraph = "<pageref type=""string"">" & Char.Items(i).TagItem("page") & "</pageref>"
            Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
            Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
            
            work = Char.Items(i).TagItem("stepoff")
            If work <> "" Then
                tmp = work
                work = Char.Items(i).TagItem("step")
                If work <> "" Then
                    tmp = tmp & work
                Else
                    tmp = tmp & "?"
                End If
            Else
                tmp = tmp & "?+?"
            End If
            
            Paragraph = "</id-" & tag_index & ">"
            
        End If
    Next
    
    Paragraph = "</spelllist>"
    Paragraph = ""
    
End Sub


'****************************************
'Print Hand Weapons
'****************************************
Sub PrintHandWeapons()
    
    Dim weapon_index
    Dim tag_index
    Dim weapon_mode_index
    Dim mode_tag_index
    Dim saved_level
    Dim db
    Dim blk
    
    Paragraph = ""
    Paragraph = "<meleecombatlist>"
    
    For i = 1 To Char.Items.Count
        
        'we only want to include hand weapons here, so look for items with Reach
        okay = False
        tmp = Char.Items(i).TagItem("charreach")
        
        If tmp = "C" Then
            okay = True
        End If
        ' C,1 1,2 etc.
        If Len(tmp) > 1 Then
            okay = True
        Else
            ' 1, 2, etc.
            If StrToLng(tmp) > 0 Then
                okay = True
            End If
        End If
        ' Trying to allow non-reach-like values to be ignored (a user uses this for some reason)
        
        'exclude hidden items
        If Char.Items(CurItem).TagItem("hide") <> "" Then
            ' only hide stats & equipment--hidden ads or skills should print
            If Char.Items(CurItem).ItemType = Equipment Or Char.Items(CurItem).ItemType = Stats Then
                okay = False
            End If
        End If
        
        If okay Then
            
            '* loop round for each reach mode
            CurMode = Char.Items(i).DamageModeTagItemAt("charreach")
            
            ' create the opening tag for this weapon item
            weapon_index = weapon_index + 1
            tag_index = LeadingZeroes(CStr(weapon_index), 5)
            
            Dim qty : qty = 1 
            If StrToLng(Char.Items(i).tagitem("count")) <> 0 Then
                qty = StrToLng(Char.Items(i).tagitem("count"))
            End If
            
            Paragraph = "<id-" & tag_index & ">"
            
            ' print the name
            Paragraph = "<name type=""string"">" &  UpdateEscapeChars(Char.Items(i).FullNameTL) & "</name>"
            
            'print the minimum strength required (not currently shown on Fantasy Grounds character sheet)
            'note dagger and double dagger are converted to an escape sequence as they do not exist in the encoding used by xml and FG
            'the dagger character us Unicode 2020 and the double dagger us Unicode 2021
            Paragraph = "<st type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "minst") & "</st>"
            
            'print the cost (currently shown on equipment page instead of weapons page due to space restrictions)
            Paragraph = "<cost type=""string"">" & StrToDbl(Char.Items(i).tagitem("cost")) / qty & "</cost>"
            
            'print the weight (currently shown on equipment page instead of weapons page due to space restrictions)
            Paragraph = "<weight type=""string"">" & StrToDbl(Char.Items(i).tagitem("weight")) /qty & "</weight>"
            
            'print the notes (not currently shown on Fantasy Grounds character sheet)
            Paragraph = "<text type=""string"">" & Char.Items(i).TagItem("usernotes") & "</text>"
            
            Paragraph = "<tl type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "techlvl") & "</tl>"
            
            weapon_mode_index = 0
            Paragraph = "<meleemodelist>"
            Do
                ' create the opening tag for this weapon item
                weapon_mode_index = weapon_mode_index + 1
                mode_tag_index = LeadingZeroes(CStr(weapon_mode_index), 5)
                
                Paragraph = "<id-" & mode_tag_index & ">"
                
                'print the mode
                Paragraph = "<name type=""string"">" & Char.Items(i).DamageModeName(CurMode) & "</name>"
                ' print the skill level
                saved_level = Char.Items(i).DamageModeTagItem(CurMode, "charskillscore")
                Paragraph = "<level type=""number"">" & saved_level & "</level>"
                
                ' print the damage
                DamageText = Char.Items(i).DamageModeTagItem(CurMode, "chardamage")
                If Char.Items(i).DamageModeTagItem(CurMode, "chararmordivisor") <> "" Then
                    DamageText = DamageText & " (" & Char.Items(i).DamageModeTagItem(CurMode, "chararmordivisor") & ")"
                End If
                DamageText = DamageText & " " & Char.Items(i).DamageModeTagItem(CurMode, "chardamtype")
                Paragraph = "<damage type=""string"">" & DamageText & "</damage>"
                
                'print the reach
                Paragraph = "<reach type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "charreach") & "</reach>"
                
                'print the parry
                Paragraph = "<parry type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "charparryscore") & "</parry>"
                
                db = Char.Items(i).DamageModeTagItem(CurMode, "db")
                ' If it has a DB value, then compute a block (since I can't find the "blocklevel")
                if db <> "" Then
                    dim tskill, pos, block
                    tskill = Char.Items(i).DamageModeTagItem(CurMode, "charskillused")
                    'remove surrounding quotes, if any
                    if left(tskill,1) = chr(34) then
                        tskill = mid(tskill, 2)
                    end if
                    if right(tskill,1) = chr(34) then
                        tskill = left(tskill, len(tskill)-1)
                    end if
                    'remove prefix tag, if any
                    if left(tskill, 3) = "SK:" then
                        tskill = mid(tskill, 4)
                    end if
                    
                    pos = Char.ItemPositionByNameAndExt(tskill, Skills)
                    If pos > 0 Then
                        block = Char.Items(pos).TagItem("blocklevel")
                        block = StrToLng(block)
                        Paragraph = "<block type=""string"">" & (block + db) & "</block>"
                    End If
                End If
                
                CurMode = Char.Items(i).DamageModeTagItemAt("charreach", CurMode + 1)
                
                Paragraph = "</id-" & mode_tag_index & ">"
            Loop While CurMode > 0
            Paragraph = "</meleemodelist>"
            
            Paragraph = "</id-" & tag_index & ">"
            
        End If
    Next
    
    Paragraph = "</meleecombatlist>"
    paragraph = ""
    
End Sub

'****************************************
'Print Ranged Weapons
'****************************************
Sub PrintRangedWeapons()
    
    Dim weapon_index
    Dim tag_index
    Dim weapon_mode_index
    Dim mode_tag_index
    
    Paragraph = ""
    Paragraph = "<rangedcombatlist>"
    
    For i = 1 To Char.Items.Count
        ' Don't limit ranged attacks to only equipment
        ' If Char.Items(i).ItemType = Equipment Then
        
        'we only want to include ranged weapons here, so look for items with Range
        okay = False
        If Char.Items(i).DamageModeTagItemCount("charrangemax") > 0 Then
            okay = True
        End If
        
        If okay Then
            If Char.Items(i).TagItem("hide") = "" Then 'not hidden
                
                ' loop round for each range mode
                CurMode = Char.Items(i).DamageModeTagItemAt("charrangemax")
                
                ' create the opening tag for this weapon item
                weapon_index = weapon_index + 1
                tag_index = LeadingZeroes(CStr(weapon_index), 5)
                
                Paragraph = "<id-" & tag_index & ">"
                
                ' print the name
                Paragraph = "<name type=""string"">" & UpdateEscapeChars(Char.Items(i).FullNameTL) & "</name>" 
                'print the minimum strength required (not currently shown on Fantasy Grounds character sheet)
                'note dagger and double dagger are converted to an escape sequence as they do not exist in the encoding used by xml and FG
                'the dagger character us Unicode 2020 and the double dagger us Unicode 2021
                Paragraph = "<st type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "minst") & "</st>"
                
                'print the bulk
                Paragraph = "<bulk type=""number"">" & Char.Items(i).DamageModeTagItem(CurMode, "bulk") & "</bulk>"
                
                'print the legality class (not currently shown on Fantasy Grounds character sheet)
                Paragraph = "<lc type=""string"">" & Char.Items(i).TagItem("lc") & "</lc>"
                
                'print the notes (not currently shown on Fantasy Grounds character sheet)
                Paragraph = "<text type=""string"">" & Char.Items(i).TagItem("usernotes") & "</text>"
                
                Paragraph = "<tl type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "techlvl") & "</tl>"
                
                weapon_mode_index = 0
                Paragraph = "<rangedmodelist>"
                Do
                    ' create the opening tag for this weapon item
                    weapon_mode_index = weapon_mode_index + 1
                    mode_tag_index = LeadingZeroes(CStr(weapon_mode_index), 5)
                    
                    Paragraph = "<id-" & mode_tag_index & ">"
                    
                    'print the mode
                    Paragraph = "<name type=""string"">" & Char.Items(i).DamageModeName(CurMode) & "</name>"
                    
                    ' print the skill level
                    Paragraph = "<level type=""number"">" & Char.Items(i).DamageModeTagItem(CurMode, "charskillscore") & "</level>"
                    
                    ' print the damage
                    DamageText = Char.Items(i).DamageModeTagItem(CurMode, "chardamage")
                    If Char.Items(i).DamageModeTagItem(CurMode, "chararmordivisor") <> "" Then
                        DamageText = DamageText & " (" & Char.Items(i).DamageModeTagItem(CurMode, "chararmordivisor") & ")"
                    End If
                    DamageText = DamageText & " " & Char.Items(i).DamageModeTagItem(CurMode, "chardamtype")
                    Paragraph = "<damage type=""string"">" & DamageText & "</damage>"
                    
                    ' print the accuracy
                    Paragraph = "<acc type=""number"">" & Char.Items(i).DamageModeTagItem(CurMode, "characc") & "</acc>"
                    
                    'print the range
                    RangeText = Char.Items(i).DamageModeTagItem(CurMode, "charrangehalfdam")
                    If RangeText = "" Then
                        RangeText = Char.Items(i).DamageModeTagItem(CurMode, "charrangemax")
                    Else
                        RangeText = RangeText & "/" & Char.Items(i).DamageModeTagItem(CurMode, "charrangemax")
                    End If
                    Paragraph = "<range type=""string"">" & RangeText & "</range>"
                    
                    'print the RoF
                    Paragraph = "<rof type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "charrof") & "</rof>"
                    
                    'print the shots
                    Paragraph = "<shots type=""string"">" & Char.Items(i).DamageModeTagItem(CurMode, "charshots") & "</shots>"
                    
                    'print the recoil
                    Paragraph = "<rcl type=""number"">" & Char.Items(i).DamageModeTagItem(CurMode, "charrcl") & "</rcl>"
                    
                    CurMode = Char.Items(i).DamageModeTagItemAt("charrangemax", CurMode + 1)
                    
                    Paragraph = "</id-" & mode_tag_index & ">"
                Loop While CurMode > 0
                Paragraph = "</rangedmodelist>"
                
                Paragraph = "</id-" & tag_index & ">"
                
            End If
            
        End If

    Next
    
    Paragraph = "</rangedcombatlist>"
    paragraph = ""
    
    
End Sub


'********************************
'Prints Protection block
'********************************
Sub PrintProtection()
    
    Dim item_index
    Dim tag_index
    
    Paragraph = ""
    Paragraph = "<protectionlist>"
    Paragraph = "<bodyplan type=""string"">" & Char.BodyType & "</bodyplan>"
    
    'get DR bonus, if any
    ListLoc = Char.ItemPositionByNameAndExt("DR", Stats)
    If ListLoc > 0 Then
        If Char.Items(ListLoc).TagItem("score") <> 0 Then
            BonusDR = Char.Items(ListLoc).TagItem("score")
        End If
    End If
    If BonusDR = Empty Then BonusDR = 0
    
    ' loop through number of body locations
    For i = 1 To Char.Body.Count
        ' and print the ones that are to be displayed
        If Char.Body(i).Display Then
            
            ' create the opening tag for this inventory item
            item_index = item_index + 1
            tag_index = LeadingZeroes(CStr(item_index), 5)
            
            Paragraph = "<id-" & tag_index & ">"
            
            locDR = Char.Body(i).DR
            If locDR = Empty Then
                locDR = 0
            End If
            If BonusDR > 0 Then
                locDR = locDR & " +" & BonusDR
            End If
            
            Paragraph = "<location type=""string"">" & Char.Body(i).Name & "</location>"
            Paragraph = "<dr type=""string"">" & locDR & "</dr>"
            
            Paragraph = "</id-" & tag_index & ">"
            
        End If
    Next
    
    Paragraph = "</protectionlist>"
    Paragraph = ""
    
End Sub


'****************************************
'Print Equipment
'****************************************
Sub PrintEquipment()
    
    ' note we'll use 'inventory' to describe the items due to the space restriction on the Fantasy Ground sheet tab
    ' ('equipment' is too long)
    
    Dim item_index
    Dim tag_index
    
    Paragraph = ""
    Paragraph = "<inventorylist>"
    
    For i = 1 To Char.Items.Count
        If Char.Items(i).ItemType = Equipment Then
        ' unlike the GCA character sheets I want all items, including weapons
            
            If Char.Items(i).TagItem("hide") = "" Then
                'not hidden
                
                ' create the opening tag for this inventory item
                item_index = item_index + 1
                tag_index = LeadingZeroes(CStr(item_index), 5)
                
                Dim qty : qty = 1 
                If StrToLng(Char.Items(i).tagitem("count")) <> 0 Then
                    qty = StrToLng(Char.Items(i).tagitem("count"))
                End If
                
                Paragraph = "<id-" & tag_index & ">"
                Paragraph = "<isidentified type=""number"">1</isidentified>"
                
                Paragraph = "<name type=""string"">" & UpdateEscapeChars(Char.Items(i).FullNameTL) & "</name>"
                Paragraph = "<count type=""number"">" & Char.Items(i).tagitem("count") & "</count>"
                Paragraph = "<cost type=""string"">" & StrToDbl(Char.Items(i).tagitem("cost")) / qty & "</cost>"
                Paragraph = "<weight type=""number"">" & StrToDbl(Char.Items(i).tagitem("baseweight")) / qty & "</weight>"
                Paragraph = "<weightsum type=""number"">" & StrToDbl(Char.Items(i).tagitem("weight")) / qty & "</weightsum>"
                Paragraph = "<location type=""string"">" & Char.Items(i).tagitem("location") & "</location>"
                Paragraph = "<notes type=""formattedtext"">" & UpdateEscapeChars(Char.Items(i).tagitem("description")) & "</notes>"
                Paragraph = "<carried type=""number"">2</carried>"
                Paragraph = "<pageref type=""string"">" & UpdateEscapeChars(Char.Items(i).tagitem("page")) & "</pageref>"
                Paragraph = "<parentuuid>" & Char.Items(i).ParentKey & "</parentuuid>"
                Paragraph = "<uuid>k" & Char.Items(i).idkey & "</uuid>"
                Paragraph = "</id-" & tag_index & ">"
                
            End If
        End If
    Next
    
    Paragraph = "</inventorylist>"
    Paragraph = ""
    
End Sub

'****************************************
'Print the Description
'****************************************
Sub PrintDescription()
    
    If Char.Description = "" Then Exit Sub
    
    ' NB: need to convert carriage returns to the escape sequence '\r' here
    ' at the moment double carriage returns are treated as a single space
    
    ' first strip out line feeds
    tmp = Replace(PlainText(Char.Description), Chr(10), "")
    
    ' then print, converting carriage returns to \r
    ' (I've done this in two steps in case the pairs ever come through the other way round, e.g. after editing in a different app)
    Paragraph = "<description type=""string"">" & Replace(tmp, Chr(13), "\r") & "</description>"
    
End Sub

'****************************************
'Print the Notes
'****************************************
Sub PrintNotes()
    
    If Char.Notes = "" Then Exit Sub
    
    Paragraph = "<notelist>"
    Paragraph = "<id-00001>"
    
    ' NB: need to convert carriage returns to the escape sequence '\r' here
    ' at the moment double carriage returns are treated as a single space
    ' Changed the '\r' to an HTML '<br>'. ~Stevil
    
    ' first strip out line feeds
    tmp = Replace(PlainText(Char.Notes), Chr(10), "")
    tmp = Replace(tmp, Chr(13), "<br>")
    
    ' then print, converting carriage returns to \r
    ' (I've done this in two steps in case the pairs ever come through the other way round, e.g. after editing in a different app)
    Paragraph = "<name type=""string"">Character Note</name>"
    Paragraph = "<text type=""string"">" & UpdateEscapeChars(tmp) & "</text>"
    
    Paragraph = "</id-00001>"
    Paragraph = "</notelist>"
    
End Sub

'****************************************
'Print the Point Summary
'****************************************
Sub PrintPointSummary()
    
    ' note we'll export these for completeness, but FG will recalculate them
    Paragraph = "<pointtotals>"
    Paragraph = "<attributes type=""number"">" & Char.Cost(Stats) & "</attributes>"
    Paragraph = "<ads type=""number"">" & CStr(CInt(Char.Cost(Ads)) + CInt(Char.Cost(Packages))) & "</ads>"
    Paragraph = "<disads type=""number"">" & Char.Cost(Disads) & "</disads>"
    Paragraph = "<quirks type=""number"">" & Char.Cost(Quirks) & "</quirks>"
    Paragraph = "<skills type=""number"">" & Char.Cost(Skills) & "</skills>"
    Paragraph = "<spells type=""number"">" & Char.Cost(Spells) & "</spells>"
    Paragraph = "<powers type=""number"">" & Char.Cost(Others) & "</powers>"
    Paragraph = "<others type=""number"">" & Char.Cost(Powers) & "</others>"
    Paragraph = "<totalpoints type=""number"">" & Char.TotalPoints & "</totalpoints>"
    
    ' note that these are still strings in FG at present
    Paragraph = "<unspentpoints type=""number"">" & Char.UnspentPoints & "</unspentpoints>"
    Paragraph = "</pointtotals>"
    
    Paragraph = ""
    
End Sub


'****************************************
'* Function
'* Added to "export to Foundry VTT.gce"
'* ~ Stevil
'****************************************
Function CreateControlRoll(ByVal MyString)
    Dim regexCR
    Dim regexLess
    
    Set regexCR = New RegExp
    Set regexLess = New RegExp
    
    regexCR.IgnoreCase = True
    regexCR.Global = True
    
    regexLess.IgnoreCase = True
    regexLess.Global = True
    
    regexCR.Pattern = "CR: \d{1,2}"
    regexLess.Pattern = "\d{1,2} or less"

    MyString = Replace(MyString, "[", "") 
    MyString = Replace(MyString, "]", "")
    
    matchCR = regexCR.Test(MyString)
    If matchCR Then
        For Each Match In regexCR.Execute(MyString)
            MyString = Replace(MyString, Match.Value, "[" & Match.Value & " or less] ")
        Next
    End If
    
    matchLess = regexLess.Test(MyString)
    If matchLess Then
        For Each Match In regexLess.Execute(MyString)
            MyString = Replace(MyString, Match.Value, "[CR: " & Match.Value & "] ")
        Next
    End If

    MyString = Replace(MyString, "] or less", "]")

    CreateControlRoll =  MyString
    
End Function

'****************************************
'Pad string with leading zeroes
'****************************************
Function LeadingZeroes(ByVal MyString, ByVal NumZeroes)
    
    LeadingZeroes = String(NumZeroes - Len(MyString),"0") & MyString
    
End Function

'****************************************
'Update string with xml escape sequences
'****************************************
Function UpdateEscapeChars(ByVal MyString)
    
    MyString = Replace(MyString, "&", "&amp;")
    
    UpdateEscapeChars = MyString
    
End Function

'********************************
'Determines if language is native
'********************************
Function IsNativeLang(ByVal index)
    
    For j = 1 To Char.Items(index).Mods.count
        
        If Char.Items(index).Mods(j).FullName = "Native Language" Then
            IsNativeLang = True
            Exit Function
        End If
        
    Next
    
    IsNativeLang = False
    
End Function


'-----------------------------------------------------------------------
' FUNCTION: StrToDbl
'     Convert the passed simple numeric string, from virtually any locale, to a double.
'
'     CAVEAT: This function assumes that the values passed into it will not be
'     be seriously malformed, values which are will likely cause lossage.
'     Particularly, passed values *MUST NOT* contain digit grouping characters.
'
' PARAMETERS:
'     aNumStr    - [String] Numeric string to convert.
'
' RETURNS:
'     [Double] The resultant double, on success, or zero, on failure.
'-----------------------------------------------------------------------
Function StrToDbl(ByVal aNumStr)
    
    'trim leading/trailing whitespace from aNumStr
    aNumStr = Trim(aNumStr)
    
    'handle signs and decimals w/o initial zero
    Dim Sign : Sign = Left(aNumStr, 1)
    If Sign = "-" Or Sign = "+" Then
        StrToDbl = Sign & "0" & Mid(aNumStr, 2)
    Else
        StrToDbl = "0" & aNumStr
    End If
    
    'convert radix point
    Select Case RadixPoint    'global
    Case 2    'period
    'format with period: d.dd (e.g. 0.01)
        StrToDbl = Replace(Replace(StrToDbl, " ", ""), ",", ".")
    Case 3    'comma
    'format with comma: d,dd (e.g. 0,01)
        StrToDbl = Replace(Replace(StrToDbl, " ", ""), ".", ",")
    Case Else
    'radix point auto-detection failed, try the conversion anyway, just in case it works
    End Select
    
    'attempt to convert value to double
    On Error Resume Next        'enable error handling
    StrToDbl = CDbl(StrToDbl)   'attempt the conversion
    If Err Then                 'if an error was thrown
        StrToDbl = 0.0
        LogErr "conversion to double failed on """ & aNumStr & """"
        Err.Clear
    End If
    On Error GoTo 0             'disable error handling
    
End Function        ''StrToDbl


'-----------------------------------------------------------------------
' FUNCTION: StrToLng
'     Convert the passed simple numeric string, from virtually any locale, to a long.
'
'     CAVEAT: This function assumes that the values passed into it will not
'     be seriously malformed, values which are will likely cause lossage.
'     Particularly, passed values *MUST NOT* contain a radix point.
'
' PARAMETERS:
'     aNumStr    - [String] Numeric string to convert.
'
' RETURNS:
'     [Integer] The resultant long, on success, or zero, on failure.
'-----------------------------------------------------------------------
Function StrToLng(ByVal aNumStr)
    
    'trim leading/trailing whitespace from aNumStr
    aNumStr = Trim(aNumStr)
    
    'remove any digit grouping characters
    StrToLng = Replace(Replace(Replace(aNumStr, " ", ""), ".", ""), ",", "")
    
    'attempt to convert value to long
    On Error Resume Next        'enable error handling
    StrToLng = CLng(StrToLng)   'attempt the conversion
    If Err Then                 'if an error was thrown
        StrToLng = 0
        LogErr "conversion to long failed on """ & aNumStr & """"
        Err.Clear
    End If
    On Error GoTo 0             'disable error handling
    
End Function        ''StrToLng
